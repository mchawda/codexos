# Production Dockerfile for CodexOS RAG Engine
# Multi-stage build with security hardening and performance optimizations

# Stage 1: Build stage
FROM node:20-alpine AS builder

# Install build dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    git

# Set working directory
WORKDIR /app

# Copy package files
COPY package.json pnpm-lock.yaml ./

# Install pnpm
RUN npm install -g pnpm@8

# Install dependencies
RUN pnpm install --frozen-lockfile

# Copy source code
COPY . .

# Build the application
RUN pnpm run build

# Stage 2: Production runtime
FROM node:20-alpine AS production

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# Install production dependencies only
RUN apk add --no-cache \
    dumb-init \
    curl \
    && rm -rf /var/cache/apk/*

# Set working directory
WORKDIR /app

# Copy package files
COPY package.json pnpm-lock.yaml ./

# Install pnpm
RUN npm install -g pnpm@8

# Install only production dependencies
RUN pnpm install --frozen-lockfile --prod

# Copy built application from builder stage
COPY --from=builder --chown=nodejs:nodejs /app/dist ./dist

# Copy production configuration
COPY --from=builder --chown=nodejs:nodejs /app/.env.production ./.env.production
COPY --from=builder --chown=nodejs:nodejs /app/deployment-manifest.json ./deployment-manifest.json

# Create necessary directories
RUN mkdir -p logs metrics cache && \
    chown -R nodejs:nodejs logs metrics cache

# Switch to non-root user
USER nodejs

# Expose port
EXPOSE 3001

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3001/health || exit 1

# Use dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]

# Start the RAG engine
CMD ["node", "dist/rag-engine.js", "--config", "production", "--port", "3001"]

# Stage 3: Development stage (optional)
FROM node:20-alpine AS development

# Install development dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    git \
    vim \
    curl

# Set working directory
WORKDIR /app

# Copy package files
COPY package.json pnpm-lock.yaml ./

# Install pnpm
RUN npm install -g pnpm@8

# Install all dependencies (including dev)
RUN pnpm install

# Copy source code
COPY . .

# Expose port
EXPOSE 3001

# Start in development mode
CMD ["pnpm", "run", "dev"]

# Stage 4: Testing stage
FROM node:20-alpine AS testing

# Install testing dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    git \
    chromium \
    nss \
    freetype \
    freetype-dev \
    harfbuzz \
    ca-certificates \
    ttf-freefont

# Set working directory
WORKDIR /app

# Copy package files
COPY package.json pnpm-lock.yaml ./

# Install pnpm
RUN npm install -g pnpm@8

# Install all dependencies
RUN pnpm install

# Copy source code
COPY . .

# Set environment for testing
ENV NODE_ENV=test
ENV CHROME_BIN=/usr/bin/chromium-browser
ENV CHROME_PATH=/usr/bin/chromium-browser

# Run tests
CMD ["pnpm", "test"]

# Stage 5: Performance testing stage
FROM node:20-alpine AS performance

# Install performance testing tools
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    git \
    curl \
    htop \
    iotop \
    sysstat

# Set working directory
WORKDIR /app

# Copy package files
COPY package.json pnpm-lock.yaml ./

# Install pnpm
RUN npm install -g pnpm@8

# Install dependencies
RUN pnpm install

# Copy source code
COPY . .

# Copy performance testing scripts
COPY --from=builder /app/deploy-production.sh ./deploy-production.sh
COPY --from=builder /app/monitor-production.sh ./monitor-production.sh
COPY --from=builder /app/PERFORMANCE_TUNING.md ./PERFORMANCE_TUNING.md

# Make scripts executable
RUN chmod +x deploy-production.sh monitor-production.sh

# Expose monitoring port
EXPOSE 3001 3002

# Start performance monitoring
CMD ["./monitor-production.sh"]
