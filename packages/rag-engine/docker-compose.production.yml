version: '3.8'

services:
  # RAG Engine Service
  rag-engine:
    build:
      context: .
      dockerfile: Dockerfile.production
      target: production
    container_name: codexos-rag-engine
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - ENVIRONMENT=production
      - RAG_PORT=3001
      - RAG_WORKERS=4
      - RAG_MAX_MEMORY=1024
      - RAG_CHUNK_SIZE=800
      - RAG_BATCH_SIZE=200
      - RAG_MAX_CONNECTIONS=20
      - RAG_CACHE_TTL=7200
      - RAG_HEALTH_CHECK_INTERVAL=300000
      - RAG_ENABLE_METRICS=true
      - RAG_ENABLE_PROFILING=true
      - RAG_ENABLE_COMPRESSION=true
      - RAG_USE_APPROXIMATE_SEARCH=true
      - RAG_ENABLE_ENCRYPTION=true
      - RAG_ENABLE_AUDIT_LOGGING=true
      - RAG_MAX_QUERY_LENGTH=10000
      - RAG_MAX_QUERIES_PER_MINUTE=100
      - RAG_MAX_INGESTIONS_PER_HOUR=50
    volumes:
      - rag-data:/app/data
      - rag-logs:/app/logs
      - rag-cache:/app/cache
      - rag-metrics:/app/metrics
    networks:
      - rag-network
    depends_on:
      - chromadb
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # ChromaDB Vector Database
  chromadb:
    image: chromadb/chroma:latest
    container_name: codexos-chromadb
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
      - CHROMA_SERVER_CORS_ALLOW_ORIGINS=["*"]
      - CHROMA_SERVER_AUTH_CREDENTIALS_FILE=/chroma/chroma_auth.json
      - CHROMA_SERVER_AUTH_CREDENTIALS_PROVIDER=chromadb.auth.providers.HtpasswdFileServerAuthProvider
      - CHROMA_SERVER_AUTH_PROVIDER=chromadb.auth.providers.HtpasswdFileServerAuthProvider
    volumes:
      - chroma-data:/chroma/chroma
      - ./chroma_auth.json:/chroma/chroma_auth.json:ro
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: codexos-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Performance Monitoring
  rag-monitor:
    build:
      context: .
      dockerfile: Dockerfile.production
      target: performance
    container_name: codexos-rag-monitor
    restart: unless-stopped
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - ENVIRONMENT=production
      - RAG_ENGINE_URL=http://rag-engine:3001
      - MONITOR_PORT=3002
    volumes:
      - rag-metrics:/app/metrics
      - rag-logs:/app/logs
    networks:
      - rag-network
    depends_on:
      - rag-engine
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: codexos-rag-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    networks:
      - rag-network
    depends_on:
      - rag-engine
      - rag-monitor
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Prometheus Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: codexos-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - rag-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: codexos-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - rag-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

volumes:
  rag-data:
    driver: local
  rag-logs:
    driver: local
  rag-cache:
    driver: local
  rag-metrics:
    driver: local
  chroma-data:
    driver: local
  redis-data:
    driver: local
  nginx-logs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  rag-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
