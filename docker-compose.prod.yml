version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: codexos-postgres
    environment:
      POSTGRES_USER: ${DB_USER:-codexos}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME:-codexos_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - codexos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-codexos}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and websockets
  redis:
    image: redis:7-alpine
    container_name: codexos-redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - codexos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--auth", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ChromaDB for vector storage
  chromadb:
    image: chromadb/chroma:latest
    container_name: codexos-chromadb
    volumes:
      - chroma_data:/chroma/chroma
    environment:
      CHROMA_SERVER_AUTH_PROVIDER: "chromadb.auth.token_authn.TokenAuthenticationServerProvider"
      CHROMA_SERVER_AUTH_CREDENTIALS: ${CHROMA_AUTH_TOKEN}
      ANONYMIZED_TELEMETRY: "false"
    networks:
      - codexos-network
    restart: unless-stopped

  # FastAPI Backend
  backend:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile
      args:
        - ENVIRONMENT=production
    container_name: codexos-backend
    environment:
      # Application
      ENVIRONMENT: production
      SECRET_KEY: ${SECRET_KEY}
      
      # Database
      DATABASE_URL: postgresql+asyncpg://${DB_USER:-codexos}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-codexos_db}
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      WS_MESSAGE_QUEUE: redis://:${REDIS_PASSWORD}@redis:6379/1
      
      # ChromaDB
      CHROMA_HOST: chromadb
      CHROMA_PORT: 8000
      
      # External Services
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      
      # Stripe
      STRIPE_API_KEY: ${STRIPE_API_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      
      # Monitoring
      SENTRY_DSN: ${SENTRY_DSN}
      
      # Vault
      VAULT_MASTER_KEY: ${VAULT_MASTER_KEY}
      
    networks:
      - codexos-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      chromadb:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers 4

  # Next.js Frontend
  frontend:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    container_name: codexos-frontend
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${PUBLIC_API_URL:-https://api.codexos.dev/api/v1}
      NEXT_PUBLIC_WS_URL: ${PUBLIC_WS_URL:-wss://api.codexos.dev/ws}
      NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
    networks:
      - codexos-network
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: codexos-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - codexos-network
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: codexos-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - codexos-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: codexos-grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_INSTALL_PLUGINS: grafana-clock-panel,redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - codexos-network
    restart: unless-stopped

  # Backup service
  backup:
    image: prodrigestivill/postgres-backup-local:latest
    container_name: codexos-backup
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: ${DB_NAME:-codexos_db}
      POSTGRES_USER: ${DB_USER:-codexos}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      SCHEDULE: "@daily"
      BACKUP_KEEP_DAYS: 7
      BACKUP_KEEP_WEEKS: 4
      BACKUP_KEEP_MONTHS: 6
    volumes:
      - ./backups:/backups
    networks:
      - codexos-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

networks:
  codexos-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  chroma_data:
  prometheus_data:
  grafana_data:
  nginx_logs:
