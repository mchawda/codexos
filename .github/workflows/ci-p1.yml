name: CI P1 - Should-Have Gates

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 3 * * 1'  # Weekly on Monday at 3 AM

jobs:
  codeql:
    name: Static AppSec (CodeQL)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: 'javascript-typescript, python'
          
      - name: Perform CodeQL analysis
        uses: github/codeql-action/analyze@v3

  migrations:
    name: Database Migration Safety
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11
          
      - name: Install Poetry and dependencies
        run: |
          pipx install poetry
          poetry install --no-root
          
      - name: Check for uncommitted migration diffs
        run: |
          # Run alembic autogen to check for diffs
          cd apps/backend
          alembic upgrade head
          alembic revision --autogenerate -m "ci-check"
          
          # Check if there are any uncommitted diffs
          if [ -n "$(git diff --name-only)" ]; then
            echo "❌ Uncommitted migration diffs found:"
            git diff --name-only
            echo "Please commit migration changes or ensure schema is up to date"
            exit 1
          else
            echo "✅ No uncommitted migration diffs"
          fi

  api-contract:
    name: OpenAPI / API Contract Diff
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check for breaking API changes
        run: |
          # Look for BREAKING CHANGE notes in PR description
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            if echo "${{ github.event.pull_request.body }}" | grep -q "BREAKING CHANGE"; then
              echo "✅ Breaking changes documented with BREAKING CHANGE note"
            else
              # Check if any API files were modified
              if git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | grep -q "api/"; then
                echo "⚠️  API files modified - ensure no breaking changes or add BREAKING CHANGE note"
              else
                echo "✅ No API files modified"
              fi
            fi
          fi
          
          # Generate current OpenAPI spec for comparison
          echo "Generating OpenAPI specification..."
          # This would run your OpenAPI generation command
          # For now, just check if the spec exists
          if [ -f "apps/backend/openapi.yaml" ]; then
            echo "✅ OpenAPI specification found"
          else
            echo "⚠️  OpenAPI specification not found"
          fi

  e2e:
    name: E2E Smoke Tests (Playwright)
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:26.0.0-dind
        options: --privileged
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Start Docker services
        run: |
          docker compose -f docker-compose.yml up -d
          # Wait for services to be ready
          sleep 30
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          
      - name: Install dependencies
        run: pnpm i
        
      - name: Install Playwright
        run: pnpm dlx playwright install --with-deps
        
      - name: Run E2E tests
        run: |
          # Basic smoke tests
          echo "Running E2E smoke tests..."
          
          # Test 1: Check if services are running
          if curl -f http://localhost:8001/health; then
            echo "✅ Backend health check passed"
          else
            echo "❌ Backend health check failed"
            exit 1
          fi
          
          if curl -f http://localhost:3000; then
            echo "✅ Frontend is accessible"
          else
            echo "❌ Frontend is not accessible"
            exit 1
          fi
          
          # Test 2: Basic API functionality
          echo "Testing basic API functionality..."
          # Add more specific tests as needed
          
          echo "✅ E2E smoke tests passed"

  pr-title:
    name: Conventional Commits / PR Title
    runs-on: ubuntu-latest
    
    steps:
      - name: Validate PR title
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            build
            ci
            chore
            revert
