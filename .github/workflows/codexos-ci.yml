name: CodexOS CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans weekly
    - cron: '0 2 * * 1'

env:
  DOCKER_BUILDKIT: 1

jobs:
  # Matrix testing for multiple Python and Node versions
  test-matrix:
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
        node-version: ['18', '20']
        include:
          - python-version: '3.11'
            node-version: '18'
          - python-version: '3.12'
            node-version: '20'
    
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for CodeQL

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock', '**/pyproject.toml') }}

      - name: Cache Node.js dependencies
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
            ~/.pnpm-store
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          cd apps/backend
          poetry install

      - name: Install Node.js dependencies
        run: |
          cd apps/web
          pnpm install --frozen-lockfile

      - name: Run Python linting
        run: |
          cd apps/backend
          poetry run ruff check .
          poetry run black --check .
          poetry run mypy .

      - name: Run Node.js linting
        run: |
          cd apps/web
          pnpm lint
          pnpm type-check

      - name: Run Python tests
        run: |
          cd apps/backend
          poetry run pytest tests/ --cov=app --cov-report=xml

      - name: Run Node.js tests
        run: |
          cd apps/web
          pnpm test --coverage

      - name: Upload Python coverage
        uses: codecov/codecov-action@v3
        with:
          file: apps/backend/coverage.xml
          flags: python
          name: python-coverage

      - name: Upload Node.js coverage
        uses: codecov/codecov-action@v3
        with:
          file: apps/web/coverage/lcov.info
          flags: nodejs
          name: nodejs-coverage

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: test-matrix
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: 'p/owasp-top-ten'

      - name: Upload Semgrep results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep-results.sarif

  # Docker security scanning
  docker-security:
    runs-on: ubuntu-latest
    needs: test-matrix
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker images
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: codexos:ci
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@v0.24.0
        with:
          image-ref: codexos:ci
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

      - name: Generate SBOM
        uses: aquasecurity/trivy-action@v0.24.0
        with:
          image-ref: codexos:ci
          format: 'cyclonedx'
          output: 'sbom.json'

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sbom.json

  # CodeQL analysis
  codeql:
    runs-on: ubuntu-latest
    needs: test-matrix
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: 'python,javascript,typescript'

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Dependency review
  dependency-review:
    runs-on: ubuntu-latest
    needs: test-matrix
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v3
        with:
          fail-on-severity: moderate

  # SAST scanning
  sast:
    runs-on: ubuntu-latest
    needs: test-matrix
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Bandit (Python security linter)
        run: |
          cd apps/backend
          pip install bandit
          bandit -r app/ -f json -o bandit-report.json || true

      - name: Run npm audit
        run: |
          cd apps/web
          npm audit --audit-level moderate || true

  # Build and test Docker images
  docker-build:
    runs-on: ubuntu-latest
    needs: test-matrix
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and test backend
        uses: docker/build-push-action@v6
        with:
          context: ./apps/backend
          push: false
          tags: codexos-backend:ci
          target: test

      - name: Build and test frontend
        uses: docker/build-push-action@v6
        with:
          context: ./apps/web
          push: false
          tags: codexos-frontend:ci
          target: test

  # Integration tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [test-matrix, docker-build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start services
        run: |
          docker compose up -d postgres redis chromadb
          sleep 10
          docker compose up -d backend
          sleep 15

      - name: Run integration tests
        run: |
          cd apps/backend
          poetry run pytest tests/integration/ -v

  # Performance tests
  performance-tests:
    runs-on: ubuntu-latest
    needs: [test-matrix, docker-build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install poetry
          cd apps/backend
          poetry install

      - name: Start services
        run: |
          docker compose up -d postgres redis chromadb
          sleep 10
          docker compose up -d backend
          sleep 15

      - name: Run load tests
        run: |
          cd apps/backend
          poetry run locust -f tests/load/locustfile.py --headless -u 10 -r 1 --run-time 60s

  # Security report generation
  security-report:
    runs-on: ubuntu-latest
    needs: [security-scan, docker-security, codeql, sast]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate security report
        run: |
          echo "# Security Scan Results" > security-report.md
          echo "Generated on: $(date)" >> security-report.md
          echo "" >> security-report.md
          echo "## Summary" >> security-report.md
          echo "- Semgrep: ${{ needs.security-scan.result }}" >> security-report.md
          echo "- Trivy: ${{ needs.docker-security.result }}" >> security-report.md
          echo "- CodeQL: ${{ needs.codeql.result }}" >> security-report.md
          echo "- SAST: ${{ needs.sast.result }}" >> security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.md
