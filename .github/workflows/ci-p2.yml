name: CI P2 - Nice-to-Have Gates

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM

jobs:
  performance:
    name: Performance Budgets
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup k6
        uses: grafana/setup-k6-action@v1
        
      - name: Run performance tests
        run: |
          # Create a simple performance test script
          cat > test-perf.js << 'EOF'
          import http from 'k6/http';
          import { check, sleep } from 'k6';
          
          export const options = {
            stages: [
              { duration: '30s', target: 5 },
              { duration: '1m', target: 5 },
              { duration: '30s', target: 0 },
            ],
            thresholds: {
              http_req_duration: ['p(95)<500'], // 95th percentile < 500ms
              http_req_failed: ['rate<0.01'],  // Error rate < 1%
            },
          };
          
          export default function () {
            const response = http.get('http://localhost:8001/health');
            check(response, {
              'status is 200': (r) => r.status === 200,
              'response time < 200ms': (r) => r.timings.duration < 200,
            });
            sleep(1);
          }
          EOF
          
          echo "Performance test script created"
          echo "Note: This would run against a running system in CI"

  dependency-scan:
    name: Dependency Update Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11
          
      - name: Check npm dependencies
        run: |
          pnpm i --frozen-lockfile
          npm audit --audit-level moderate || echo "‚ö†Ô∏è  npm audit found issues"
          
      - name: Check Python dependencies
        run: |
          pipx install poetry
          poetry install --no-root
          pip-audit || echo "‚ö†Ô∏è  pip-audit found issues"
          
      - name: Check for outdated packages
        run: |
          echo "Checking for outdated packages..."
          npx npm-check-updates --target minor || echo "Some packages can be updated"
          
      - name: Generate dependency report
        run: |
          echo "üìã Dependency Update Report" > dependency-report.md
          echo "Generated: $(date)" >> dependency-report.md
          echo "" >> dependency-report.md
          echo "## npm packages" >> dependency-report.md
          npm outdated >> dependency-report.md 2>&1 || echo "No outdated npm packages" >> dependency-report.md
          echo "" >> dependency-report.md
          echo "## Python packages" >> dependency-report.md
          poetry show --outdated >> dependency-report.md 2>&1 || echo "No outdated Python packages" >> dependency-report.md
          
      - name: Upload dependency report
        uses: actions/upload-artifact@v3
        with:
          name: dependency-report
          path: dependency-report.md

  security-scan:
    name: Security & Policy Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Bandit security scan
        run: |
          pip install bandit
          bandit -r apps/backend/ -f json -o bandit-report.json || true
          
      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-scan-report
          path: bandit-report.json
          
      - name: Check for common security issues
        run: |
          echo "üîç Security Policy Checks"
          
          # Check for hardcoded secrets
          if grep -r "password\|secret\|key" apps/ --include="*.py" --include="*.ts" --include="*.tsx" | grep -v "test\|example\|TODO" | grep -q "=.*['\"].*['\"]"; then
            echo "‚ö†Ô∏è  Potential hardcoded secrets found"
          else
            echo "‚úÖ No obvious hardcoded secrets"
          fi
          
          # Check for proper error handling
          if grep -r "except:" apps/backend/ --include="*.py" | grep -v "except Exception:" | grep -v "except BaseException:" | grep -q "except:"; then
            echo "‚ö†Ô∏è  Bare except clauses found - consider specific exception handling"
          else
            echo "‚úÖ Proper exception handling found"
          fi

  rag-evaluation:
    name: RAG & Agent Evaluation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11
          
      - name: Install dependencies
        run: |
          pipx install poetry
          poetry install --no-root
          
      - name: Run RAG evaluation tests
        run: |
          echo "üß™ RAG & Agent Evaluation Tests"
          
          # Check if RAG engine can be imported
          cd apps/backend
          python -c "
          try:
              from app.services.rag_service import RAGService
              print('‚úÖ RAG service imports successfully')
          except ImportError as e:
              print(f'‚ùå RAG service import failed: {e}')
              exit(1)
          "
          
          # Check if agent engine can be imported
          python -c "
          try:
              from app.services.agent_service import AgentService
              print('‚úÖ Agent service imports successfully')
          except ImportError as e:
              print(f'‚ùå Agent service import failed: {e}')
              exit(1)
          "
          
          echo "‚úÖ Basic RAG & Agent evaluation passed"

  visual-regression:
    name: Visual Regression (Optional)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          
      - name: Install dependencies
        run: pnpm i
        
      - name: Check for Storybook
        run: |
          if [ -d "apps/web/.storybook" ]; then
            echo "‚úÖ Storybook configuration found"
            echo "Note: Visual regression tests would run here"
          else
            echo "‚ÑπÔ∏è  Storybook not configured - skipping visual regression"
          fi
          
      - name: Check for Playwright visual tests
        run: |
          if [ -f "apps/web/playwright.config.ts" ]; then
            echo "‚úÖ Playwright configuration found"
            echo "Note: Visual snapshot tests would run here"
          else
            echo "‚ÑπÔ∏è  Playwright visual tests not configured"
          fi
