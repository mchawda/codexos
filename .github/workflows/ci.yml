name: CI

on: 
  push: 
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  lint-typecheck:
    name: Lint + Typecheck (TS & Py)
    runs-on: ubuntu-latest
    strategy: 
      matrix: 
        node: [20]
        py: [3.11]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with: 
          node-version: ${{ matrix.node }}
          cache: 'npm'
          
      - name: Install PNPM
        run: npm i -g pnpm@8
        
      - name: Install dependencies
        run: pnpm i --frozen-lockfile
        
      - name: Run ESLint (no warnings)
        run: pnpm -w run -r lint
        
      - name: TypeScript typecheck
        run: pnpm -w run -r typecheck
        
      - name: Setup Python
        uses: actions/setup-python@v5
        with: 
          python-version: ${{ matrix.py }}
          
      - name: Install Python tools
        run: |
          pipx install ruff mypy
          
      - name: Run Ruff
        run: ruff check .
        
      - name: Run MyPy
        run: mypy apps/backend || true  # hard-fail once types are green

  test:
    name: Unit + API Tests (Fast)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with: 
          node-version: 20
          cache: 'npm'
          
      - name: Install dependencies
        run: pnpm i --frozen-lockfile
        
      - name: Run frontend tests with coverage
        run: pnpm -w -r test -- --coverage
        
      - name: Setup Python
        uses: actions/setup-python@v5
        with: 
          python-version: 3.11
          
      - name: Install Poetry and dependencies
        run: |
          pipx install poetry
          poetry install --no-root
          
      - name: Run backend tests with coverage
        run: |
          pytest -q --maxfail=1 --disable-warnings \
            --cov=apps/backend \
            --cov-fail-under=80

  build:
    name: Build Gates
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with: 
          node-version: 20
          cache: 'npm'
          
      - name: Install dependencies
        run: pnpm i --frozen-lockfile
        
      - name: Build frontend
        run: pnpm --filter @codexos/web build
        
      - name: Setup Python
        uses: actions/setup-python@v5
        with: 
          python-version: 3.11
          
      - name: Install uvicorn
        run: pipx install uvicorn
        
      - name: Compile Python files
        run: python -m py_compile $(git ls-files '*.py')

  container-security:
    name: Container Scan + SBOM
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Build backend container
        run: docker build -t codexos/backend ./apps/backend
        
      - name: Run Trivy vulnerability scan
        uses: aquasecurity/trivy-action@v0.15.0
        with: 
          image-ref: codexos/backend
          format: 'table'
          exit-code: '1'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          
      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with: 
          artifact-name: 'sbom.spdx.json'
          
      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v3
        with:
          name: sbom-backend
          path: sbom.spdx.json

  supply-chain:
    name: Secrets & License Compliance
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Gitleaks secret scan
        uses: gitleaks/gitleaks-action@v2
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with: 
          node-version: 20
          cache: 'npm'
          
      - name: Install dependencies
        run: pnpm i --frozen-lockfile
        
      - name: Check OSS licenses
        run: npx license-checker --production --summary

  docs-links:
    name: Documentation Link Checker
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check documentation links
        uses: lycheeverse/lychee-action@v1
        with:
          args: --no-progress --exclude-mail "docs/**/*.md" "*.md"
